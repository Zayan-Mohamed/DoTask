<script lang="ts">
	import { onMount } from 'svelte';
	import { user, authService } from '$lib/stores/auth';
	import { settings } from '$lib/stores/settings';
	import { goto } from '$app/navigation';

	// Settings state
	let isLoading = $state(false);
	let settingsError = $state('');
	let settingsSuccess = $state('');

	// Application settings
	let appSettings = $state({
						<div>
						<label for="language-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Language
						</label>
						<select 
							id="language-select"
							bind:value={appSettings.language}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="en">English</option>
							<option value="es">Spanish</option>
							<option value="fr">French</option>
							<option value="de">German</option>
							<option value="it">Italian</option>
						</select>
					</div>,
		language: 'en',
		timezone: 'America/New_York',
		dateFormat: 'MM/dd/yyyy',
		timeFormat: '12-hour'
	});

	// Notification settings
	let notificationSettings = $state({
		emailNotifications: true,
		pushNotifications: false,
		taskReminders: true,
		dueDateReminders: true,
		weeklyDigest: false,
		dailyDigest: false,
		reminderTime: '09:00'
	});

	// Privacy settings
	let privacySettings = $state({
		profileVisibility: 'private',
		activityTracking: true,
		analyticsOptOut: false,
		dataExport: false
	});

	// Productivity settings
	let productivitySettings = $state({
		defaultTaskPriority: 'MEDIUM',
		autoArchiveCompleted: false,
		workingHours: {
			start: '09:00',
			end: '17:00',
			days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']
		},
		pomodoroTimer: 25,
		breakTime: 5,
		focusMode: false
	});

	// Context7 Advanced Settings (AI-powered productivity features)
	let context7Settings = $state({
		smartPrioritization: true,
		contextualInsights: true,
		intelligentScheduling: false,
		adaptiveReminders: true,
		productivityAnalytics: true,
		workPatternAnalysis: false,
		stressLevelMonitoring: false,
		energyOptimization: false
	});

	// Load settings on mount
	onMount(async () => {
		if (!$user) {
			await authService.checkAuth();
			if (!$user) {
				goto('/auth/login');
				return;
			}
		}
		loadSettings();
	});

	// Load settings from localStorage
	function loadSettings() {
		try {
			// Load theme from existing settings store
			appSettings.theme = $settings.theme;

			// Load other settings from localStorage
			const savedAppSettings = localStorage.getItem('appSettings');
			if (savedAppSettings) {
				appSettings = { ...appSettings, ...JSON.parse(savedAppSettings) };
			}

			const savedNotificationSettings = localStorage.getItem('notificationSettings');
			if (savedNotificationSettings) {
				notificationSettings = { ...notificationSettings, ...JSON.parse(savedNotificationSettings) };
			}

			const savedPrivacySettings = localStorage.getItem('privacySettings');
			if (savedPrivacySettings) {
				privacySettings = { ...privacySettings, ...JSON.parse(savedPrivacySettings) };
			}

			const savedProductivitySettings = localStorage.getItem('productivitySettings');
			if (savedProductivitySettings) {
				productivitySettings = { ...productivitySettings, ...JSON.parse(savedProductivitySettings) };
			}

			const savedContext7Settings = localStorage.getItem('context7Settings');
			if (savedContext7Settings) {
				context7Settings = { ...context7Settings, ...JSON.parse(savedContext7Settings) };
			}
		} catch (error) {
			console.error('Failed to load settings:', error);
		}
	}

	// Save settings
	async function saveSettings() {
		try {
			isLoading = true;
			settingsError = '';
			settingsSuccess = '';

			// Update theme in settings store and apply it
			settings.update(s => ({ ...s, theme: appSettings.theme }));
			localStorage.setItem('theme', appSettings.theme);
			
			// Apply theme to document
			if (appSettings.theme === 'dark') {
				document.documentElement.classList.add('dark');
			} else {
				document.documentElement.classList.remove('dark');
			}

			// Save to localStorage
			localStorage.setItem('appSettings', JSON.stringify(appSettings));
			localStorage.setItem('notificationSettings', JSON.stringify(notificationSettings));
			localStorage.setItem('privacySettings', JSON.stringify(privacySettings));
			localStorage.setItem('productivitySettings', JSON.stringify(productivitySettings));
			localStorage.setItem('context7Settings', JSON.stringify(context7Settings));

			settingsSuccess = 'Settings saved successfully!';
			setTimeout(() => {
				settingsSuccess = '';
			}, 3000);
		} catch (error) {
			console.error('Failed to save settings:', error);
			settingsError = 'Failed to save settings. Please try again.';
			setTimeout(() => {
				settingsError = '';
			}, 5000);
		} finally {
			isLoading = false;
		}
	}

	// Reset to defaults
	function resetToDefaults() {
		if (confirm('Are you sure you want to reset all settings to their default values?')) {
			appSettings = {
				theme: 'light',
				language: 'en',
				timezone: 'America/New_York',
				dateFormat: 'MM/dd/yyyy',
				timeFormat: '12-hour'
			};

			notificationSettings = {
				emailNotifications: true,
				pushNotifications: false,
				taskReminders: true,
				dueDateReminders: true,
				weeklyDigest: false,
				dailyDigest: false,
				reminderTime: '09:00'
			};

			privacySettings = {
				profileVisibility: 'private',
				activityTracking: true,
				analyticsOptOut: false,
				dataExport: false
			};

			productivitySettings = {
				defaultTaskPriority: 'MEDIUM',
				autoArchiveCompleted: false,
				workingHours: {
					start: '09:00',
					end: '17:00',
					days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday']
				},
				pomodoroTimer: 25,
				breakTime: 5,
				focusMode: false
			};

			context7Settings = {
				smartPrioritization: true,
				contextualInsights: true,
				intelligentScheduling: false,
				adaptiveReminders: true,
				productivityAnalytics: true,
				workPatternAnalysis: false,
				stressLevelMonitoring: false,
				energyOptimization: false
			};

			saveSettings();
		}
	}

	// Export data
	function exportData() {
		const data = {
			appSettings,
			notificationSettings,
			privacySettings,
			productivitySettings,
			context7Settings,
			exportDate: new Date().toISOString()
		};

		const dataStr = JSON.stringify(data, null, 2);
		const dataBlob = new Blob([dataStr], { type: 'application/json' });
		const url = URL.createObjectURL(dataBlob);
		
		const link = document.createElement('a');
		link.href = url;
		link.download = `dotask-settings-${new Date().toISOString().split('T')[0]}.json`;
		document.body.appendChild(link);
		link.click();
		document.body.removeChild(link);
		URL.revokeObjectURL(url);
	}

	// Import data
	function importData() {
		const input = document.createElement('input');
		input.type = 'file';
		input.accept = '.json';
		input.onchange = (e) => {
			const file = (e.target as HTMLInputElement).files?.[0];
			if (file) {
				const reader = new FileReader();
				reader.onload = (e) => {
					try {
						const data = JSON.parse(e.target?.result as string);
						
						if (data.appSettings) appSettings = { ...appSettings, ...data.appSettings };
						if (data.notificationSettings) notificationSettings = { ...notificationSettings, ...data.notificationSettings };
						if (data.privacySettings) privacySettings = { ...privacySettings, ...data.privacySettings };
						if (data.productivitySettings) productivitySettings = { ...productivitySettings, ...data.productivitySettings };
						if (data.context7Settings) context7Settings = { ...context7Settings, ...data.context7Settings };
						
						saveSettings();
						settingsSuccess = 'Settings imported successfully!';
					} catch (error) {
						settingsError = 'Failed to import settings. Please check the file format.';
					}
				};
				reader.readAsText(file);
			}
		};
		input.click();
	}

	// Get timezone list (simplified)
	const timezones = [
		'America/New_York',
		'America/Chicago',
		'America/Denver',
		'America/Los_Angeles',
		'Europe/London',
		'Europe/Paris',
		'Europe/Berlin',
		'Asia/Tokyo',
		'Asia/Shanghai',
		'Australia/Sydney'
	];

	// Working days
	const workingDays = [
		{ key: 'monday', label: 'Monday' },
		{ key: 'tuesday', label: 'Tuesday' },
		{ key: 'wednesday', label: 'Wednesday' },
		{ key: 'thursday', label: 'Thursday' },
		{ key: 'friday', label: 'Friday' },
		{ key: 'saturday', label: 'Saturday' },
		{ key: 'sunday', label: 'Sunday' }
	];
</script>

<svelte:head>
	<title>Settings - DoTask</title>
</svelte:head>

<div class="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
	<div class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
		<!-- Header -->
		<div class="bg-white dark:bg-gray-800 shadow rounded-lg mb-8">
			<div class="px-6 py-6">
				<div class="flex justify-between items-center">
					<div>
						<h1 class="text-3xl font-bold text-gray-900 dark:text-white">Settings</h1>
						<p class="text-gray-600 dark:text-gray-300 mt-2">
							Customize your DoTask experience and preferences
						</p>
					</div>
					<div class="flex space-x-3">
						<button
							onclick={exportData}
							class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
						>
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
							</svg>
							Export
						</button>
						<button
							onclick={importData}
							class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-gray-700 dark:text-gray-300 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
						>
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M9 19l3 3m0 0l3-3m-3 3V10" />
							</svg>
							Import
						</button>
						<button
							onclick={resetToDefaults}
							class="inline-flex items-center px-4 py-2 text-red-600 border border-red-300 rounded-md hover:bg-red-50 dark:hover:bg-red-900/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
						>
							<svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
							</svg>
							Reset
						</button>
					</div>
				</div>

				{#if settingsError}
					<div class="mt-4 bg-red-100 dark:bg-red-900/30 border-l-4 border-red-500 text-red-700 dark:text-red-300 p-4" role="alert">
						{settingsError}
					</div>
				{/if}

				{#if settingsSuccess}
					<div class="mt-4 bg-green-100 dark:bg-green-900/30 border-l-4 border-green-500 text-green-700 dark:text-green-300 p-4" role="alert">
						{settingsSuccess}
					</div>
				{/if}
			</div>
		</div>

		<div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
			<!-- Application Settings -->
			<div class="bg-white dark:bg-gray-800 shadow rounded-lg">
				<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white">
						Application Settings
					</h2>
				</div>
				<div class="px-6 py-6 space-y-6">
					<div>
						<label for="theme-select" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Theme
						</label>
						<select 
							id="theme-select"
							bind:value={appSettings.theme}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="light">Light</option>
							<option value="dark">Dark</option>
							<option value="auto">Auto (System)</option>
						</select>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Language
						</label>
						<select 
							bind:value={appSettings.language}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="en">English</option>
							<option value="es">Spanish</option>
							<option value="fr">French</option>
							<option value="de">German</option>
							<option value="ja">Japanese</option>
						</select>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Timezone
						</label>
						<select 
							bind:value={appSettings.timezone}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							{#each timezones as timezone}
								<option value={timezone}>{timezone}</option>
							{/each}
						</select>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Date Format
						</label>
						<select 
							bind:value={appSettings.dateFormat}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="MM/dd/yyyy">MM/DD/YYYY</option>
							<option value="dd/MM/yyyy">DD/MM/YYYY</option>
							<option value="yyyy-MM-dd">YYYY-MM-DD</option>
							<option value="MMM d, yyyy">MMM D, YYYY</option>
						</select>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Time Format
						</label>
						<select 
							bind:value={appSettings.timeFormat}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="12-hour">12-hour (AM/PM)</option>
							<option value="24-hour">24-hour</option>
						</select>
					</div>
				</div>
			</div>

			<!-- Notification Settings -->
			<div class="bg-white dark:bg-gray-800 shadow rounded-lg">
				<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white">
						Notifications
					</h2>
				</div>
				<div class="px-6 py-6 space-y-6">
					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Email Notifications</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Receive notifications via email</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={notificationSettings.emailNotifications} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Push Notifications</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Browser push notifications</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={notificationSettings.pushNotifications} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Task Reminders</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Get reminded about upcoming tasks</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={notificationSettings.taskReminders} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Due Date Reminders</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Alerts for approaching due dates</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={notificationSettings.dueDateReminders} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Weekly Digest</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Weekly summary of your tasks</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={notificationSettings.weeklyDigest} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Default Reminder Time
						</label>
						<input
							type="time"
							bind:value={notificationSettings.reminderTime}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						/>
					</div>
				</div>
			</div>

			<!-- Productivity Settings -->
			<div class="bg-white dark:bg-gray-800 shadow rounded-lg">
				<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white">
						Productivity Settings
					</h2>
				</div>
				<div class="px-6 py-6 space-y-6">
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Default Task Priority
						</label>
						<select 
							bind:value={productivitySettings.defaultTaskPriority}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="LOW">Low</option>
							<option value="MEDIUM">Medium</option>
							<option value="HIGH">High</option>
						</select>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Auto-archive Completed Tasks</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Automatically archive completed tasks after 30 days</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={productivitySettings.autoArchiveCompleted} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="space-y-4">
						<h3 class="text-sm font-medium text-gray-900 dark:text-white">Working Hours</h3>
						<div class="grid grid-cols-2 gap-4">
							<div>
								<label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">Start Time</label>
								<input
									type="time"
									bind:value={productivitySettings.workingHours.start}
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
								/>
							</div>
							<div>
								<label class="block text-xs text-gray-600 dark:text-gray-400 mb-1">End Time</label>
								<input
									type="time"
									bind:value={productivitySettings.workingHours.end}
									class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
								/>
							</div>
						</div>
						<div>
							<label class="block text-xs text-gray-600 dark:text-gray-400 mb-2">Working Days</label>
							<div class="grid grid-cols-2 gap-2">
								{#each workingDays as day}
									<label class="flex items-center space-x-2">
										<input
											type="checkbox"
											checked={productivitySettings.workingHours.days.includes(day.key)}
											onchange={(e) => {
												const isChecked = (e.target as HTMLInputElement).checked;
												if (isChecked) {
													productivitySettings.workingHours.days = [...productivitySettings.workingHours.days, day.key];
												} else {
													productivitySettings.workingHours.days = productivitySettings.workingHours.days.filter(d => d !== day.key);
												}
											}}
											class="rounded border-gray-300 dark:border-gray-600 text-primary focus:ring-primary dark:bg-gray-700"
										/>
										<span class="text-sm text-gray-700 dark:text-gray-300">{day.label}</span>
									</label>
								{/each}
							</div>
						</div>
					</div>

					<div class="grid grid-cols-2 gap-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
								Pomodoro Timer (minutes)
							</label>
							<input
								type="number"
								bind:value={productivitySettings.pomodoroTimer}
								min="1"
								max="60"
								class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
							/>
						</div>
						<div>
							<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
								Break Time (minutes)
							</label>
							<input
								type="number"
								bind:value={productivitySettings.breakTime}
								min="1"
								max="30"
								class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
							/>
						</div>
					</div>
				</div>
			</div>

			<!-- Context7 Advanced Settings -->
			<div class="bg-gradient-to-br from-primary/5 to-purple-500/5 dark:from-primary/10 dark:to-purple-500/10 border border-primary/20 shadow rounded-lg">
				<div class="px-6 py-4 border-b border-primary/20">
					<div class="flex items-center space-x-2">
						<svg class="w-6 h-6 text-primary" fill="none" stroke="currentColor" viewBox="0 0 24 24">
							<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z" />
						</svg>
						<h2 class="text-xl font-semibold text-gray-900 dark:text-white">
							Context7 AI Features
						</h2>
						<span class="px-2 py-1 text-xs font-medium bg-primary text-white rounded-full">ADVANCED</span>
					</div>
					<p class="text-sm text-gray-600 dark:text-gray-400 mt-1">
						AI-powered productivity features using Context7 technology
					</p>
				</div>
				<div class="px-6 py-6 space-y-6">
					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Smart Prioritization</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">AI analyzes patterns to suggest task priorities</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.smartPrioritization} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Contextual Insights</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Get personalized productivity insights</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.contextualInsights} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Intelligent Scheduling</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">AI suggests optimal times for tasks</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.intelligentScheduling} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Adaptive Reminders</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Smart reminders based on your work patterns</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.adaptiveReminders} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Productivity Analytics</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Detailed analytics on your productivity patterns</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.productivityAnalytics} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Work Pattern Analysis</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Analyze and optimize your work patterns</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.workPatternAnalysis} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Energy Optimization</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Match tasks to your energy levels</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={context7Settings.energyOptimization} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>
				</div>
			</div>

			<!-- Privacy Settings -->
			<div class="bg-white dark:bg-gray-800 shadow rounded-lg">
				<div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
					<h2 class="text-xl font-semibold text-gray-900 dark:text-white">
						Privacy & Security
					</h2>
				</div>
				<div class="px-6 py-6 space-y-6">
					<div>
						<label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
							Profile Visibility
						</label>
						<select 
							bind:value={privacySettings.profileVisibility}
							class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 dark:bg-gray-700 dark:text-white rounded-md focus:outline-none focus:ring-2 focus:ring-primary"
						>
							<option value="private">Private</option>
							<option value="friends">Friends Only</option>
							<option value="public">Public</option>
						</select>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Activity Tracking</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Allow tracking for productivity insights</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={privacySettings.activityTracking} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="flex items-center justify-between">
						<div>
							<h3 class="text-sm font-medium text-gray-900 dark:text-white">Analytics Opt-out</h3>
							<p class="text-xs text-gray-600 dark:text-gray-400">Opt out of anonymous usage analytics</p>
						</div>
						<label class="relative inline-flex items-center cursor-pointer">
							<input type="checkbox" bind:checked={privacySettings.analyticsOptOut} class="sr-only peer" />
							<div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-primary/25 dark:peer-focus:ring-primary/50 rounded-full peer dark:bg-gray-700 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-primary"></div>
						</label>
					</div>

					<div class="border-t border-gray-200 dark:border-gray-700 pt-6">
						<h3 class="text-sm font-medium text-gray-900 dark:text-white mb-4">Data Management</h3>
						<div class="space-y-3">
							<button
								onclick={exportData}
								class="w-full text-left px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-md hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary"
							>
								<div class="flex items-center">
									<svg class="w-5 h-5 text-blue-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
									</svg>
									<div>
										<p class="text-sm font-medium text-gray-900 dark:text-white">Export Your Data</p>
										<p class="text-xs text-gray-600 dark:text-gray-400">Download all your data in JSON format</p>
									</div>
								</div>
							</button>

							<button
								class="w-full text-left px-4 py-3 border border-red-300 dark:border-red-700 rounded-md hover:bg-red-50 dark:hover:bg-red-900/20 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
							>
								<div class="flex items-center">
									<svg class="w-5 h-5 text-red-600 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
										<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
									</svg>
									<div>
										<p class="text-sm font-medium text-red-600">Delete All Data</p>
										<p class="text-xs text-red-500">Permanently delete all your data</p>
									</div>
								</div>
							</button>
						</div>
					</div>
				</div>
			</div>
		</div>

		<!-- Save Button -->
		<div class="mt-8 flex justify-end">
			<button
				onclick={saveSettings}
				disabled={isLoading}
				class="px-6 py-3 bg-primary text-white font-medium rounded-md hover:bg-primary/80 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary disabled:opacity-50 disabled:cursor-not-allowed"
			>
				{isLoading ? 'Saving...' : 'Save All Settings'}
			</button>
		</div>
	</div>
</div>
