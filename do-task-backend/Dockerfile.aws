# Multi-stage build for Go backend (AWS Production)
FROM golang:1.21-alpine AS builder

WORKDIR /app

# Install git and ca-certificates (needed for some Go modules)
RUN apk add --no-cache git ca-certificates

# Set Go environment variables
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV GOARCH=amd64

# Debug: Show Go version and environment
RUN go version
RUN go env

# Copy go mod and sum files
COPY go.mod go.sum ./

# Debug: Show what we copied
RUN ls -la
RUN cat go.mod

# Set proxy for better connectivity
ENV GOPROXY=https://proxy.golang.org,direct
ENV GOSUMDB=sum.golang.org

# Download dependencies with verbose output
RUN go mod download -x || (echo "Go mod download failed" && cat go.mod && exit 1)

# Verify modules
RUN go mod verify || echo "Module verification failed but continuing..."

# Copy source code
COPY . .

# Build the application
RUN go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main ./cmd/server

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS requests and wget for health checks
RUN apk --no-cache add ca-certificates wget tzdata

WORKDIR /root/

# Copy the binary from builder stage
COPY --from=builder /app/main .

# Expose port
EXPOSE 8080

# Add health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run the binary
CMD ["./main"]
